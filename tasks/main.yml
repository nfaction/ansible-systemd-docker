---

- name: install docker and required packages
  package:
    name: '{{ item }}'
    state: present
  with_items: '{{ systemd_docker_packages }}'
  when: install_os_deb_version | bool
  tags:
    - install
    - docker

- name: install docker python module
  pip:
    name: "{{ systemd_docker_pip_packages }}"
    state: present
    executable: "{{ pip_executable | default(omit) }}"
  tags:
    - install
    - docker

- name: check out main repos
  git:
    repo: "{{ item.repo }}"
    dest: "{{ systemd_docker_cache_path }}/{{ item.repo_name }}"
    force: true
    accept_hostkey: true
    version: "{{ item.branch | default('master') }}"
  with_items: "{{ systemd_docker_git_repositories_to_checkout }}"
  connection: local
  delegate_to: localhost
  run_once: true
  tags:
    - git

- name: make source directories
  file:
    path: '{{ item.1.src }}'
    state: directory
    mode: 0755
    owner: "{{ item.1.owner | default('root') }}"
    group: "{{ item.1.group | default('root') }}"
  with_subelements:
    - '{{ systemd_docker_apps }}'
    - volumes
  when: systemd_docker_make_dirs | bool
  failed_when: false
  tags:
    - template
    - mkdir

- name: pull down extra files
  get_url:
    url: "{{ item.1.src }}"
    dest: "{{ item.1.dest }}"
    owner: root
    group: root
    mode: 0644
    force: true
  with_subelements:
    - '{{ systemd_docker_apps }}'
    - files_to_dl
  when: item.1.src is defined
  tags:
    - template
    - mkdir

- name: copy git docker-compose.yml files to their destination
  copy:
    src: "{{ item.compose_src }}"
    dest: "{{ item.compose_dest }}"
    mode: "{{ item.mode | default('0755') }}"
    owner: "{{ item.owner | default('root') }}"
    group: "{{ item.group | default('root') }}"
    backup: true
  with_items:
    - "{{ systemd_docker_apps }}"
  when: item.docker_working_dir is defined

- name: template docker app systemd
  template:
    src: docker-app.service.j2
    dest: "{{ systemd_container_path }}/{{ systemd_unit_prefix }}{{ item.name }}{{ systemd_unit_postfix }}.service"
    owner: root
    group: root
    mode: 0644
  notify: reload systemd
  with_items: '{{ systemd_docker_apps }}'
  when:
    - item.container is defined
    - (item.url is not defined) or (item.docker_working_dir is defined)
    - ansible_service_mgr == "systemd"
  tags:
    - template

- name: template docker-compose app systemd
  template:
    src: docker-compose-app.service.j2
    dest: "{{ systemd_container_path }}/{{ systemd_unit_prefix }}{{ item.name }}{{ systemd_unit_postfix }}.service"
    owner: root
    group: root
    mode: 0644
  notify: reload systemd
  with_items: '{{ systemd_docker_apps }}'
  when:
    - item.docker_working_dir is defined
    - item.container is not defined
    - ansible_service_mgr == "systemd"
  tags:
    - template

- name: pull down custom docker app systemd files
  get_url:
    url: "{{ item.url }}"
    dest: "{{ systemd_container_path }}/{{ systemd_unit_prefix }}{{ item.name }}{{ systemd_unit_postfix }}.service"
    owner: root
    group: root
    mode: 0644
    backup: true
    checksum: "{{ item.checksum | default(omit) }}"
  notify: reload systemd
  with_items: '{{ systemd_docker_apps }}'
  when: item.url is defined
  tags:
    - template

- meta: flush_handlers
  tags:
    - template

- name: start docker service
  systemd:
    name: '{{ item }}'
    state: started
    enabled: true
  with_items:
    - docker
  tags:
    - docker

- name: reload all systemd units
  systemd:
    daemon_reload: true
  tags:
    - docker

# - name: pull down all containers
#   docker_image:
#     name: "{{ item.container }}"
#     # added in 2.8
#     # source: pull
#   with_items: '{{ docker_apps }}'
#   register: docker_pull
#   until: docker_pull | succeeded
#   tags:
#     - docker

- name: pull down all containers
  command: docker pull {{ item.container }}
  with_items: '{{ systemd_docker_apps }}'
  register: docker_pull
  until: docker_pull.rc == 0
  failed_when: false
  changed_when: false
  when: item.container is defined
  tags:
    - docker

- name: start the docker apps
  systemd:
    name: "{{ systemd_unit_prefix }}{{ item.name }}{{ systemd_unit_postfix }}.service"
    state: "{{ item.state | default('started') }}"
    enabled: "{{ item.enabled | default(true) }}"
  with_items: '{{ systemd_docker_apps }}'
  when:
    - ansible_service_mgr == "systemd"
  tags:
    - docker
